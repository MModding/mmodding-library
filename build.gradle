import com.mmodding.gradle.api.EnvironmentTarget

plugins {
	id 'maven-publish'
	alias(libs.plugins.quilt.loom)
	alias(libs.plugins.mmodding.gradle)
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url = "https://maven.terraformersmc.com" }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft

	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }

	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api

	modImplementation libs.modmenu
}

loom {
	accessWidenerPath = file("src/main/resources/mmodding_lib.accesswidener")
}

mmodding {
	configureQuiltModJson {
		name = "MModding Library"
		namespace = "mmodding_lib"
		group = "com.mmodding"
		description = "The MModding Library is the Main Library for MModding Mods."
		icon = "assets/mmodding_lib/icon.png"
		addContributor("MModding Team", "Owner")
		addContributor("FirstMegaGame4", "Lead Developer")
		addContributor("Neokys", "Icon Artist")
		withContact {
			it.homepage = "https://mmodding.com"
			it.sources = "https://github.com/MModding/mmodding-library"
			it.issues = "https://github.com/MModding/mmodding-library/issues"
		}
		environment = EnvironmentTarget.ANY
		withEntrypoints {
			it.init("com.mmodding.mmodding_lib.MModdingLib")
			it.client("com.mmodding.mmodding_lib.client.MModdingLibClient")
			it.server("com.mmodding.mmodding_lib.server.MModdingLibServer")
			it.custom("modmenu", "com.mmodding.mmodding_lib.impl.ModMenuApiImpl")
		}
		addMixin("mmodding_lib.mixins.json")
		accessWidener = "mmodding_lib.accesswidener"
		withDependencies {
			it.javaVersion = ">=" + 17
			it.minecraftVersion = "~" + libs.versions.minecraft.get()
			it.quiltLoaderVersion = ">=0.17.6-"
			it.quiltedFabricApiVersion = ">=1.0.0-"
		}
		withInjectedInterfaces {
			it.injectTo("net/minecraft/class_1297", "com/mmodding/mmodding_lib/interface_injections/EntitySyncableDataRegistry")
			it.injectTo("net/minecraft/class_1799", Set.of(
				"com/mmodding/mmodding_lib/interface_injections/TagRuntimeManagement\u0024ItemStackTagRuntimeManagement",
				"com/mmodding/mmodding_lib/interface_injections/HiddenDataStorage",
				"com/mmodding/mmodding_lib/interface_injections/ItemGlintPack"
			))
			it.injectTo("net/minecraft/class_1657", "com/mmodding/mmodding_lib/interface_injections/SoundtrackPlayerContainer")
			it.injectTo("net/minecraft/class_1792", "com/mmodding/mmodding_lib/interface_injections/ItemGlintPack")
			it.injectTo("net/minecraft/class_2688", "com/mmodding/mmodding_lib/interface_injections/ReverseCycleState<TS;>")
			it.injectTo("net/minecraft/class_3610", Set.of(
				"com/mmodding/mmodding_lib/interface_injections/TagRuntimeManagement\u0024FluidStateTagRuntimeManagement",
				"com/mmodding/mmodding_lib/interface_injections/FluidGroupComparable"
			))
			it.injectTo("net/minecraft/class_4770", "com/mmodding/mmodding_lib/interface_injections/ShouldLightCustomPortal")
			it.injectTo("net/minecraft/class_4970\u0024class_4971", "com/mmodding/mmodding_lib/interface_injections/TagRuntimeManagement\u0024BlockStateTagRuntimeManagement")
			it.injectTo("net/minecraft/class_6880", "com/mmodding/mmodding_lib/interface_injections/TagRuntimeManagement")
		}
		withCustom {
			it.withBlock("modmenu") {
				it.withArray("badges") {
					it.add("library")
				}
			}
		}
	}
}

project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with developement.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE.md") {
		rename { "${it}_${archivesBaseName}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
